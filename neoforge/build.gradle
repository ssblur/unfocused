plugins {
  id 'com.gradleup.shadow'
  id 'org.jetbrains.kotlin.jvm'
}

architectury {
  platformSetupLoomIde()
  neoForge()
}

configurations {
  common {
    canBeResolved = true
    canBeConsumed = false
  }
  compileClasspath.extendsFrom common
  runtimeClasspath.extendsFrom common
  developmentNeoForge.extendsFrom common

  shadowBundle {
    canBeResolved = true
    canBeConsumed = false
  }
}

repositories {
  maven {
    name = 'NeoForged'
    url = 'https://maven.neoforged.net/releases'
  }
  maven {
    name = "Kotlin for Forge"
    setUrl("https://thedarkcolour.github.io/KotlinForForge/")
  }
  mavenCentral()
}

dependencies {
  neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"
  implementation("thedarkcolour:kotlinforforge-neoforge:$rootProject.kff_version")

  common(project(path: ':common', configuration: 'namedElements')) { transitive false }
  shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
}

processResources {
  inputs.property 'version', project.version

  filesMatching('META-INF/neoforge.mods.toml') {
    expand(
            version: project.version,
            kff_version: rootProject.kff_version
    )
  }
}

shadowJar {
  exclude "architectury.common.json"

  configurations = [project.configurations.shadowBundle]
  archiveClassifier = 'dev-shadow'
}

remapJar {
  injectAccessWidener = true
  inputFile.set shadowJar.archiveFile
  dependsOn shadowJar
}

kotlin {
  jvmToolchain(rootProject.jvm_version as Integer)
}

loom {
  accessWidenerPath = project(":common").loom.accessWidenerPath
}