plugins {
  id 'com.gradleup.shadow'
  id 'org.jetbrains.kotlin.jvm'
}

architectury {
  platformSetupLoomIde()
  fabric()
}

loom {
  accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
  common {
    canBeResolved = true
    canBeConsumed = false
  }
  compileClasspath.extendsFrom common
  runtimeClasspath.extendsFrom common
  developmentFabric.extendsFrom common

  shadowBundle {
    canBeResolved = true
    canBeConsumed = false
  }
}

dependencies {
  modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

  modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"
  modImplementation "net.fabricmc:fabric-language-kotlin:$rootProject.flk_version"

  common(project(path: ':common', configuration: 'namedElements')) { transitive false }
  shadowBundle(project(path: ':common', configuration: 'transformProductionFabric'))
}

processResources {
  inputs.property 'version', project.version

  filesMatching('fabric.mod.json') {
    expand(
      version: project.version,
      flk_version: rootProject.flk_version,
      minecraft_version: rootProject.minecraft_version,
      fabric_loader_version: rootProject.fabric_loader_version,
      fabric_api_version: rootProject.fabric_api_version,
      jvm_version: rootProject.jvm_version,
    )
  }
}

shadowJar {
  exclude "architectury.common.json"

  configurations = [project.configurations.shadowBundle]
  archiveClassifier = 'dev-shadow'
}

remapJar {
  injectAccessWidener = true
  inputFile.set shadowJar.archiveFile
  dependsOn shadowJar
}

repositories {
  mavenCentral()
}

kotlin {
  jvmToolchain(rootProject.jvm_version as Integer)
}
